<#
.SYNOPSIS
    Sets up a basic PowerShell profile with useful aliases and functions.

.DESCRIPTION
    This optional script creates a PowerShell profile with common aliases,
    functions, and settings that make the command line experience better.
    
.PARAMETER Force
    Overwrite existing profile without prompting
#>

param(
    [switch]$Force
)

# Import utility functions
. ".\scripts\utilities.ps1"

Write-BootstrapHeader "PowerShell Profile Setup"

try {
    # Check if profile exists
    if (Test-Path $PROFILE -and -not $Force) {
        $response = Read-Host "PowerShell profile already exists. Overwrite? (y/N)"
        if ($response -notlike "y*") {
            Write-BootstrapInfo "Profile setup cancelled by user"
            return
        }
    }

    # Create profile directory if it doesn't exist
    $profileDir = Split-Path $PROFILE -Parent
    if (-not (Test-Path $profileDir)) {
        New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
        Write-BootstrapInfo "Created profile directory: $profileDir"
    }

    # Create the profile content
    $profileContent = @'
# PowerShell Profile - Generated by bootstrap-windows
# Feel free to customize this file!

# Set console encoding to UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Useful aliases
Set-Alias -Name ll -Value Get-ChildItem
Set-Alias -Name la -Value Get-ChildItem
Set-Alias -Name grep -Value Select-String
Set-Alias -Name which -Value Get-Command

# Git aliases (if git is available)
if (Get-Command git -ErrorAction SilentlyContinue) {
    function gs { git status $args }
    function ga { git add $args }
    function gc { git commit $args }
    function gp { git push $args }
    function gl { git log --oneline $args }
    function gd { git diff $args }
}

# Enhanced directory listing
function l { Get-ChildItem -Force $args }
function ll { Get-ChildItem -Force $args | Format-Table -AutoSize }

# Quick navigation
function .. { Set-Location .. }
function ... { Set-Location ..\.. }
function .... { Set-Location ..\..\.. }

# System information
function sysinfo {
    Write-Host "System Information:" -ForegroundColor Cyan
    Write-Host "OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor Green
    Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor Green
    Write-Host "User: $($env:USERNAME)" -ForegroundColor Green
    Write-Host "Computer: $($env:COMPUTERNAME)" -ForegroundColor Green
    Write-Host "Date: $(Get-Date)" -ForegroundColor Green
}

# Network information
function myip {
    try {
        $ip = (Invoke-WebRequest -Uri "https://ipinfo.io/ip" -UseBasicParsing).Content.Trim()
        Write-Host "Public IP: $ip" -ForegroundColor Green
    } catch {
        Write-Host "Could not retrieve public IP" -ForegroundColor Red
    }
    
    $localIPs = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" }
    Write-Host "Local IPs:" -ForegroundColor Cyan
    foreach ($ip in $localIPs) {
        Write-Host "  $($ip.InterfaceAlias): $($ip.IPAddress)" -ForegroundColor Green
    }
}

# Enhanced prompt
function prompt {
    $currentPath = $ExecutionContext.SessionState.Path.CurrentLocation.Path
    $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    # Show different colors based on admin status
    if ($isAdmin) {
        Write-Host "PS " -NoNewline -ForegroundColor Red
        Write-Host $currentPath -NoNewline -ForegroundColor Yellow
        Write-Host " [ADMIN]" -NoNewline -ForegroundColor Red
    } else {
        Write-Host "PS " -NoNewline -ForegroundColor Blue
        Write-Host $currentPath -NoNewline -ForegroundColor Green
    }
    
    return "> "
}

# Welcome message
Write-Host "PowerShell Profile Loaded!" -ForegroundColor Green
Write-Host "Type 'sysinfo' for system information" -ForegroundColor Cyan
Write-Host "Type 'myip' for IP address information" -ForegroundColor Cyan

'@

    # Write the profile
    $profileContent | Out-File -FilePath $PROFILE -Encoding UTF8 -Force
    
    Write-BootstrapSuccess "PowerShell profile created successfully!"
    Write-BootstrapInfo "Profile location: $PROFILE"
    Write-BootstrapInfo "The profile will be loaded automatically in new PowerShell sessions."
    Write-BootstrapInfo "To reload in current session, run: . `$PROFILE"

} catch {
    Write-BootstrapError "Profile setup failed: $($_.Exception.Message)"
    exit 1
}
'@